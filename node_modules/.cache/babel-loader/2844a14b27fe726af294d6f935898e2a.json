{"ast":null,"code":"var _jsxFileName = \"/Users/sagewatterworth/Desktop/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Focus from \"./Focus\";\nimport IncrementButtons from \"./IncrementButtons\";\nimport PlayStopButtons from \"./PlayStopButtons\"; // Initial values of focus duration, break duration, timerRunning & session countdown\n\nconst initialStates = {\n  focusDuration: 25,\n  breakDuration: 5,\n  isTimerRunning: false,\n  sessionCountdown: 0,\n  focusSessionActive: false,\n  sessionActive: false,\n  ariaValue: 0\n};\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null); // ToDo: Allow the user to adjust the focus and break duration. (DONE?)\n\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  function handleIncreaseFocus() {\n    if (focusDuration >= 60) return;\n    const newValue = focusDuration + 5;\n    setFocusDuration(newValue);\n  }\n\n  function handleDecreaseFocus() {\n    if (focusDuration <= 5) return;\n    const newValue = focusDuration - 5;\n    setFocusDuration(newValue);\n  }\n\n  function handleIncreaseBreak() {\n    if (breakDuration >= 15) return;\n    const newValue = breakDuration + 1;\n    setBreakDuration(newValue);\n  }\n\n  function handleDecreaseBreak() {\n    if (breakDuration <= 1) return;\n    const newValue = breakDuration - 1;\n    setBreakDuration(newValue);\n  }\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(IncrementButtons, {\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    handleIncrementClick: handleIncrementClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PlayStopButtons, {\n    isTimerRunning: isTimerRunning,\n    handlePlayPause: handlePlayPause,\n    handleStop: handleStop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Focus, {\n    sessionActive: sessionActive,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    focusSessionActive: focusSessionActive,\n    sessionCountdown: sessionCountdown,\n    ariaValue: ariaValue,\n    handleIncreaseFocus: handleIncreaseFocus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/sagewatterworth/Desktop/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","Focus","IncrementButtons","PlayStopButtons","initialStates","focusDuration","breakDuration","isTimerRunning","sessionCountdown","focusSessionActive","sessionActive","ariaValue","nextTick","prevState","timeRemaining","Math","max","nextSession","currentSession","label","Pomodoro","setIsTimerRunning","session","setSession","setFocusDuration","setBreakDuration","handleIncreaseFocus","newValue","handleDecreaseFocus","handleIncreaseBreak","handleDecreaseBreak","Audio","play","playPause","nextState","prevStateSession","handleIncrementClick","handlePlayPause","handleStop"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Focus from \"./Focus\";\nimport IncrementButtons from \"./IncrementButtons\";\nimport PlayStopButtons from \"./PlayStopButtons\";\n\n  // Initial values of focus duration, break duration, timerRunning & session countdown\n  const initialStates = {\n    focusDuration: 25,\n    breakDuration: 5,\n    isTimerRunning: false,\n    sessionCountdown: 0,\n    focusSessionActive: false,\n    sessionActive: false,\n    ariaValue: 0,\n  };\n\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n\n  // ToDo: Allow the user to adjust the focus and break duration. (DONE?)\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n\n   function handleIncreaseFocus(){\n    if(focusDuration >= 60) return\n     const newValue = focusDuration+ 5\n    setFocusDuration(newValue)\n  }\n\n   function handleDecreaseFocus(){\n     if(focusDuration <= 5) return\n     const newValue = focusDuration - 5\n     setFocusDuration(newValue)\n   }\n\n   function handleIncreaseBreak(){\n    if(breakDuration >= 15) return\n     const newValue = breakDuration+ 1\n    setBreakDuration(newValue)\n  }\n\n   function handleDecreaseBreak(){\n     if(breakDuration <= 1) return\n     const newValue = breakDuration- 1\n     setBreakDuration(newValue)\n   }\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n  return (\n    <div className=\"pomodoro\">\n      <IncrementButtons\n        focusDuration={focusDuration}\n        breakDuration={breakDuration}\n        handleIncrementClick={handleIncrementClick}\n      />\n      <PlayStopButtons\n      isTimerRunning={isTimerRunning}\n      handlePlayPause={handlePlayPause}\n      handleStop={handleStop}\n      />\n      <Focus\n      sessionActive={sessionActive}\n      focusDuration={focusDuration}\n      breakDuration={breakDuration}\n      focusSessionActive={focusSessionActive}\n      sessionCountdown={sessionCountdown}\n      ariaValue={ariaValue}\n      handleIncreaseFocus={handleIncreaseFocus}\n      />\n    </div>\n  )\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}
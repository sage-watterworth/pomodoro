{"ast":null,"code":"var _jsxFileName = \"/Users/sagewatterworth/Desktop/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Focus from \"./Focus\";\nimport Break from \"./Break\";\nimport PlayPause from \"./PlayPause\";\nimport SubTitle from \"./SubTitle\";\n\nfunction Pomodoro() {\n  const initialStates = {\n    focusDuration: 25,\n    breakDuration: 5,\n    isTimerRunning: false,\n    sessionCountdown: 0,\n    focusSessionActive: false,\n    sessionActive: false,\n    aria: 0\n  }; // Timer starts out paused\n\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null);\n  const [sessionCountdown, setSessionCountdown] = useState(0);\n  const [sessionActive, setSessionActive] = useState(false);\n  const [ariaValue, setAriaValue] = useState(0); // ToDo: Allow the user to adjust the focus and break duration.\n\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [focusSessionActive, setFocusSessionActive] = useState(false); //disable and enable stop button\n\n  const [stopButton, setStopButton] = useState(true);\n  const [disableButton, setDisableButton] = useState(true);\n  const [breakLeft, setBreakLeft] = useState(0);\n  const [elapsed, setElapsed] = useState(0);\n  /**\n   * Update the session state with new state after each tick of the interval.\n   * @param prevState\n   *  the previous session state\n   * @returns\n   *  new session state with timing information updated.\n   */\n\n  function nextTick(prevState) {\n    const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n    return { ...prevState,\n      timeRemaining\n    };\n  }\n  /**\n   * Higher order function that returns a function to update the session state with the next session type upon timeout.\n   * @param focusDuration\n   *    the current focus duration\n   * @param breakDuration\n   *    the current break duration\n   * @returns\n   *  function to update the session state.\n   */\n\n\n  function nextSession(focusDuration, breakDuration) {\n    /**\n     * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n     */\n    return currentSession => {\n      if (currentSession.label === \"Focusing\") {\n        return {\n          label: \"On Break\",\n          timeRemaining: breakDuration * 60\n        };\n      }\n\n      return {\n        label: \"Focusing\",\n        timeRemaining: focusDuration * 60\n      };\n    };\n  }\n\n  useInterval(() => {\n    setBreakLeft(breakLeft + 1);\n\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    setSession(nextTick);\n    const left = session.timeRemaining;\n\n    if (session.label === \"Focusing\") {\n      setAria(100 * (focusDuration * 60 - left) / (focusDuration * 60));\n    } else {\n      setAria(100 * (breakDuration * 60 - left) / (breakDuration * 60));\n    }\n  }, isTimerRunning ? 1000 : null); //    setAriaValue(100*(focusTime * 60 - focusRun)/(focusTime*60))\n  //  }\n  //   else {setAriaValue(100*(breakTime * 60 - breakRun)/(breakTime*60))\n\n  useInterval(() => {\n    if (session && session.timeRemaining) {\n      return setElapsed(elapsed + 1);\n    }\n  }, 1000);\n\n  function handleStop() {\n    setIsTimerRunning(false);\n    setStopButton(true);\n    setSession(null);\n    setDisableButton(false);\n    setFocusSessionActive(false);\n    setSessionActive(false);\n  }\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n\n  function handlePlayPauseClick() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            setDisableButton(false);\n            setSessionCountdown(sessionActive);\n            setSessionActive(true);\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Break, {\n    breakDuration: breakDuration,\n    handleIncrementClick: handleIncrementClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 8\n    }\n  }), /*#__PURE__*/React.createElement(Focus, {\n    focusDuration: focusDuration,\n    handleIncrementClick: handleIncrementClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PlayPause, {\n    isTimerRunning: isTimerRunning,\n    handleStop: handleStop,\n    disableButton: disableButton,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    focusSessionActive: focusSessionActive,\n    focusDuration: focusDuration,\n    sessionCountdown: sessionCountdown,\n    handlePlayPauseClick: handlePlayPauseClick,\n    ariaValue: ariaValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SubTitle, {\n    sessionActive: sessionActive,\n    ariaValue: ariaValue,\n    sessionCountdown: sessionCountdown,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    focusSessionActive: focusSessionActive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/sagewatterworth/Desktop/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","Focus","Break","PlayPause","SubTitle","Pomodoro","initialStates","focusDuration","breakDuration","isTimerRunning","sessionCountdown","focusSessionActive","sessionActive","aria","setIsTimerRunning","session","setSession","setSessionCountdown","setSessionActive","ariaValue","setAriaValue","setFocusDuration","setBreakDuration","setFocusSessionActive","stopButton","setStopButton","disableButton","setDisableButton","breakLeft","setBreakLeft","elapsed","setElapsed","nextTick","prevState","timeRemaining","Math","max","nextSession","currentSession","label","Audio","play","left","setAria","handleStop","handlePlayPauseClick","nextState","prevStateSession","handleIncrementClick"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Focus from \"./Focus\";\nimport Break from \"./Break\";\nimport PlayPause from \"./PlayPause\";\nimport SubTitle from \"./SubTitle\";\n\nfunction Pomodoro() {\n\n  const initialStates = {\n    focusDuration: 25,\n    breakDuration: 5,\n    isTimerRunning: false,\n    sessionCountdown: 0,\n    focusSessionActive: false,\n    sessionActive: false,\n    aria: 0,\n  };\n\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n  const [sessionCountdown, setSessionCountdown] = useState(0);\n  const [sessionActive, setSessionActive] = useState(false);\n  const [ariaValue, setAriaValue] = useState(0);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [focusSessionActive, setFocusSessionActive] = useState(false);\n\n  //disable and enable stop button\n  const [stopButton, setStopButton] = useState(true)\n  const [disableButton, setDisableButton] = useState(true)\n\n\n  const [breakLeft, setBreakLeft] = useState(0)\n  const[elapsed, setElapsed] = useState(0)\n\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\n\nuseInterval(() => {\n  setBreakLeft(breakLeft + 1)\n  if (session.timeRemaining === 0) {\n    new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n    setSession(nextSession(focusDuration, breakDuration));\n  }\n  setSession(nextTick);\nconst left = session.timeRemaining\nif(session.label === \"Focusing\") {\n  setAria(100*(focusDuration * 60 - left)/(focusDuration*60))\n} else {\n  setAria(100*(breakDuration * 60 - left)/(breakDuration*60))\n}\n},\nisTimerRunning ? 1000 : null\n);\n\n\n//    setAriaValue(100*(focusTime * 60 - focusRun)/(focusTime*60))\n//  }\n//   else {setAriaValue(100*(breakTime * 60 - breakRun)/(breakTime*60))\n\n\n\n\nuseInterval(()=> {\nif(session && session.timeRemaining) {\n return setElapsed(elapsed + 1)\n}\n},1000)\n\n\nfunction handleStop(){\n  setIsTimerRunning(false)\n  setStopButton(true)\n  setSession(null)\n  setDisableButton(false)\n  setFocusSessionActive(false)\n  setSessionActive(false)\n}\n\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\nfunction handlePlayPauseClick() {\n     setIsTimerRunning((prevState) => {\n       const nextState = !prevState;\n       if (nextState) {\n         setSession((prevStateSession) => {\n           // If the timer is starting and the previous session is null,\n           // start a focusing session.\n           if (prevStateSession === null) {\n            setDisableButton(false);\n            setSessionCountdown(sessionActive)\n            setSessionActive(true)\n             return {\n               label: \"Focusing\",\n               timeRemaining: focusDuration * 60,\n             };\n           }\n           return prevStateSession;\n         });\n      }\n    return nextState;\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n\n       <Break\n        breakDuration={breakDuration}\n        handleIncrementClick={handleIncrementClick}\n      />\n      <Focus\n      focusDuration={focusDuration}\n      handleIncrementClick={handleIncrementClick}\n      />\n      <PlayPause\n        isTimerRunning={isTimerRunning}\n        handleStop={handleStop}\n        disableButton={disableButton}\n        focusDuration={focusDuration}\n        breakDuration={breakDuration}\n        focusSessionActive={focusSessionActive}\n        focusDuration={focusDuration}\n        sessionCountdown={sessionCountdown}\n        handlePlayPauseClick={handlePlayPauseClick}\n        ariaValue={ariaValue}\n      />\n      <SubTitle\n      sessionActive={sessionActive}\n      ariaValue={ariaValue}\n      sessionCountdown={sessionCountdown}\n      focusDuration={focusDuration}\n      breakDuration={breakDuration}\n      focusSessionActive={focusSessionActive}\n      />\n    </div>\n  )\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}
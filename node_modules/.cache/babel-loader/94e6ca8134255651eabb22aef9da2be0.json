{"ast":null,"code":"var _jsxFileName = \"/Users/sagewatterworth/Desktop/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Focus from \"./Focus\";\nimport Break from \"./Break\";\nimport PlayPause from \"./PlayPause\";\nimport SubTitle from \"./SubTitle\";\nconst initialStates = {\n  focusDuration: 25,\n  breakDuration: 5,\n  isTimerRunning: false,\n  sessionCountdown: 0,\n  focusSessionActive: false,\n  sessionActive: false,\n  ariaValue: 0\n};\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null);\n  const [elapsed, setElapsed] = useState(0);\n  const [sessionActive, setSessionActive] = useState(false);\n  const [ariaValue, setAriaValue] = useState(0);\n  const [breakLeft, setBreakLeft] = useState(0); // ToDo: Allow the user to adjust the focus and break duration.\n\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [focusSessionActive, setFocusSessionActive] = useState(false); //disable and enable stop button\n\n  const [stopButton, setStopButton] = useState(true);\n  const [disableButton, setDisableButton] = useState(true);\n  /**\n   * Update the session state with new state after each tick of the interval.\n   * @param prevState\n   *  the previous session state\n   * @returns\n   *  new session state with timing information updated.\n   */\n\n  function nextTick(prevState) {\n    const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n    return { ...prevState,\n      timeRemaining\n    };\n  }\n  /**\n   * Higher order function that returns a function to update the session state with the next session type upon timeout.\n   * @param focusDuration\n   *    the current focus duration\n   * @param breakDuration\n   *    the current break duration\n   * @returns\n   *  function to update the session state.\n   */\n\n\n  function nextSession(focusDuration, breakDuration) {\n    /**\n     * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n     */\n    return currentSession => {\n      if (currentSession.label === \"Focusing\") {\n        return {\n          label: \"On Break\",\n          timeRemaining: breakDuration * 60\n        };\n      }\n\n      return {\n        label: \"Focusing\",\n        timeRemaining: focusDuration * 60\n      };\n    };\n  }\n\n  const handleIncrementClick = ({\n    target\n  }) => {\n    if (target.name === \"increase-focus\" || target.parentNode.name === \"increase-focus\") {\n      setFocusDuration(currentFocusDuration => Math.min(currentFocusDuration + 5, 60));\n    } else if (target.name === \"decrease-focus\" || target.parentNode.name === \"decrease-focus\") {\n      setFocusDuration(currentFocusDuration => Math.max(currentFocusDuration - 5, 5));\n    } else if (target.name === \"increase-break\" || target.parentNode.name === \"increase-break\") {\n      setBreakDuration(currentFocusDuration => Math.min(currentFocusDuration + 1, 15));\n    } else if (target.name === \"decrease-break\" || target.parentNode.name === \"decrease-break\") {\n      setBreakDuration(currentFocusDuration => Math.max(currentFocusDuration - 1, 1));\n    }\n  };\n\n  function handleStop() {\n    setIsTimerRunning(false);\n    setStopButton(true);\n    setSession(null);\n    setDisableButton(false);\n    setFocusSessionActive(false);\n    setSessionCountdown(0);\n    setSessionActive(false);\n  }\n\n  useInterval(() => {\n    setBreakLeft(breakLeft + 1);\n\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    setSession(nextTick);\n    const left = session.timeRemaining;\n\n    if (session.label === \"Focusing\") {\n      setAria(100 * (focusDuration * 60 - left) / (focusDuration * 60));\n    } else {\n      setAria(100 * (breakDuration * 60 - left) / (breakDuration * 60));\n    }\n  }, isTimerRunning ? 1000 : null);\n  useInterval(() => {\n    if (session && session.timeRemaining) {\n      return setElapsed(elapsed + 1);\n    }\n  }, 1000);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function handlePlayPauseClick() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            setDisableButton(false);\n            setSessionCountdown(sessionActive);\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Break, {\n    breakDuration: breakDuration,\n    handleIncrementClick: handleIncrementClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 8\n    }\n  }), /*#__PURE__*/React.createElement(Focus, {\n    focusDuration: focusDuration,\n    handleIncrementClick: handleIncrementClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PlayPause, {\n    isTimerRunning: isTimerRunning,\n    handleStop: handleStop,\n    disableButton: disableButton,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    focusSessionActive: focusSessionActive,\n    focusDuration: focusDuration,\n    sessionCountdown: sessionCountdown,\n    handlePlayPauseClick: handlePlayPauseClick,\n    ariaValue: ariaValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SubTitle, {\n    sessionActive: sessionActive,\n    ariaValue: ariaValue,\n    sessionCountdown: sessionCountdown,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    focusSessionActive: focusSessionActive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/sagewatterworth/Desktop/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","Focus","Break","PlayPause","SubTitle","initialStates","focusDuration","breakDuration","isTimerRunning","sessionCountdown","focusSessionActive","sessionActive","ariaValue","Pomodoro","setIsTimerRunning","session","setSession","elapsed","setElapsed","setSessionActive","setAriaValue","breakLeft","setBreakLeft","setFocusDuration","setBreakDuration","setFocusSessionActive","stopButton","setStopButton","disableButton","setDisableButton","nextTick","prevState","timeRemaining","Math","max","nextSession","currentSession","label","handleIncrementClick","target","name","parentNode","currentFocusDuration","min","handleStop","setSessionCountdown","Audio","play","left","setAria","handlePlayPauseClick","nextState","prevStateSession"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Focus from \"./Focus\";\nimport Break from \"./Break\";\nimport PlayPause from \"./PlayPause\";\nimport SubTitle from \"./SubTitle\";\n\n\n  const initialStates = {\n    focusDuration: 25,\n    breakDuration: 5,\n    isTimerRunning: false,\n    sessionCountdown: 0,\n    focusSessionActive: false,\n    sessionActive: false,\n    ariaValue: 0,\n  };\n\n  function Pomodoro() {\n\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n  const [elapsed, setElapsed] = useState(0);\n  const [sessionActive, setSessionActive] = useState(false);\n  const [ariaValue, setAriaValue] = useState(0);\n  const [breakLeft, setBreakLeft] = useState(0);\n\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [focusSessionActive, setFocusSessionActive] = useState(false);\n\n  //disable and enable stop button\n  const [stopButton, setStopButton] = useState(true)\n  const [disableButton, setDisableButton] = useState(true)\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\n\n  const handleIncrementClick = ({ target }) => {\n    if (\n      target.name === \"increase-focus\" ||\n      target.parentNode.name === \"increase-focus\"\n    ) {\n      setFocusDuration((currentFocusDuration) => Math.min(currentFocusDuration + 5, 60));\n    } else if (\n      target.name === \"decrease-focus\" ||\n      target.parentNode.name === \"decrease-focus\"\n    ) {\n      setFocusDuration((currentFocusDuration) => Math.max(currentFocusDuration - 5, 5));\n    } else if (\n      target.name === \"increase-break\" ||\n      target.parentNode.name === \"increase-break\"\n    ) {\n      setBreakDuration((currentFocusDuration) => Math.min(currentFocusDuration + 1, 15));\n    } else if (\n      target.name === \"decrease-break\" ||\n      target.parentNode.name === \"decrease-break\"\n    ) {\n      setBreakDuration((currentFocusDuration) => Math.max(currentFocusDuration - 1, 1));\n    }\n  };\n\n\nfunction handleStop(){\n  setIsTimerRunning(false)\n  setStopButton(true)\n  setSession(null)\n  setDisableButton(false)\n  setFocusSessionActive(false)\n  setSessionCountdown(0)\n  setSessionActive(false)\n}\n\nuseInterval(() => {\n  setBreakLeft(breakLeft + 1)\n  if (session.timeRemaining === 0) {\n    new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n    setSession(nextSession(focusDuration, breakDuration));\n  }\n  setSession(nextTick);\nconst left = session.timeRemaining\nif(session.label === \"Focusing\") {\n  setAria(100*(focusDuration * 60 - left)/(focusDuration*60))\n} else {\n  setAria(100*(breakDuration * 60 - left)/(breakDuration*60))\n}\n},\nisTimerRunning ? 1000 : null\n);\n\n\nuseInterval(()=> {\nif(session && session.timeRemaining) {\n return setElapsed(elapsed + 1)\n}\n}, 1000)\n\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\nfunction handlePlayPauseClick() {\n     setIsTimerRunning((prevState) => {\n       const nextState = !prevState;\n       if (nextState) {\n         setSession((prevStateSession) => {\n           // If the timer is starting and the previous session is null,\n           // start a focusing session.\n           if (prevStateSession === null) {\n            setDisableButton(false);\n            setSessionCountdown(sessionActive)\n             return {\n               label: \"Focusing\",\n               timeRemaining: focusDuration * 60,\n             };\n           }\n           return prevStateSession;\n         });\n      }\n    return nextState;\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n\n       <Break\n        breakDuration={breakDuration}\n        handleIncrementClick={handleIncrementClick}\n      />\n      <Focus\n      focusDuration={focusDuration}\n      handleIncrementClick={handleIncrementClick}\n      />\n      <PlayPause\n        isTimerRunning={isTimerRunning}\n        handleStop={handleStop}\n        disableButton={disableButton}\n        focusDuration={focusDuration}\n        breakDuration={breakDuration}\n        focusSessionActive={focusSessionActive}\n        focusDuration={focusDuration}\n        sessionCountdown={sessionCountdown}\n        handlePlayPauseClick={handlePlayPauseClick}\n        ariaValue={ariaValue}\n      />\n      <SubTitle\n      sessionActive={sessionActive}\n      ariaValue={ariaValue}\n      sessionCountdown={sessionCountdown}\n      focusDuration={focusDuration}\n      breakDuration={breakDuration}\n      focusSessionActive={focusSessionActive}\n      />\n    </div>\n  )\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/sagewatterworth/Desktop/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Focus from \"./Focus\";\nimport Break from \"./Break\";\nimport PlayPause from \"./PlayPause\";\nimport SubTitle from \"./SubTitle\";\nconst initialStates = {\n  focusDuration: 25,\n  breakDuration: 5,\n  isTimerRunning: false,\n  sessionCountdown: 0,\n  focusSessionActive: false,\n  sessionActive: false,\n  ariaValue: 0\n};\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null);\n  const [sessionCountdown, setSessionCountdown] = useState(0);\n  const [sessionActive, setSessionActive] = useState(false);\n  const [ariaValue, setAriaValue] = useState(0); // ToDo: Allow the user to adjust the focus and break duration.\n\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [focusSessionActive, setFocusSessionActive] = useState(false); //disable and enable stop button\n\n  const [stopButton, setStopButton] = useState(true);\n  const [disableButton, setDisableButton] = useState(true);\n  /**\n   * Update the session state with new state after each tick of the interval.\n   * @param prevState\n   *  the previous session state\n   * @returns\n   *  new session state with timing information updated.\n   */\n\n  function nextTick(prevState) {\n    const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n    return { ...prevState,\n      timeRemaining\n    };\n  }\n  /**\n   * Higher order function that returns a function to update the session state with the next session type upon timeout.\n   * @param focusDuration\n   *    the current focus duration\n   * @param breakDuration\n   *    the current break duration\n   * @returns\n   *  function to update the session state.\n   */\n\n\n  function nextSession(focusDuration, breakDuration) {\n    /**\n     * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n     */\n    return currentSession => {\n      if (currentSession.label === \"Focusing\") {\n        return {\n          label: \"On Break\",\n          timeRemaining: breakDuration * 60\n        };\n      }\n\n      return {\n        label: \"Focusing\",\n        timeRemaining: focusDuration * 60\n      };\n    };\n  }\n\n  const handleIncrementClick = ({\n    target\n  }) => {\n    /*\n    ISSUE: The icons on the buttons and the buttons themselves return different values,\n    so I only place handle event on buttons themselves.\n    */\n    // Handling decrease and increase buttons for focus duration and break duration when not in session\n    if (!focusSessionActive && sessionCountdown === 0) {\n      switch (target[\"name\"]) {\n        case \"decrease-focus\":\n          setFocusDuration(currentFocusDuration => Math.max(5, currentFocusDuration - 5));\n          break;\n\n        case \"increase-focus\":\n          setFocusDuration(currentFocusDuration => Math.min(60, currentFocusDuration + 5));\n          break;\n\n        case \"decrease-break\":\n          setBreakDuration(currentBreakDuration => Math.max(1, currentBreakDuration - 1));\n          break;\n\n        case \"increase-break\":\n          setBreakDuration(currentBreakDuration => Math.min(15, currentBreakDuration + 1));\n          break;\n\n        default:\n          break;\n      }\n    }\n  };\n\n  function handleStop() {\n    setIsTimerRunning(false);\n    setStopButton(true);\n    setSession(null);\n    setDisableButton(false);\n    setFocusSessionActive(false);\n    setSessionActive(false);\n    setSessionCountdown(25 * 60);\n    setBreakDuration(5 * 60);\n    setFocusDuration(25 * 60);\n    setAriaValue(25);\n  }\n\n  useInterval(() => {\n    // Progress bar\n    if (focusSessionActive) {\n      setAriaValue(sessionCountdown / (focusDuration * 60) * 100);\n    } else if (!focusSessionActive && sessionCountdown !== 0) {\n      setAriaValue(sessionCountdown / (breakDuration * 60) * 100);\n    }\n    /*\n    Run increment countdown at turn of new session\n    */\n\n\n    setSessionCountdown(currentSessionCountdown => {\n      if (focusSessionActive && currentSessionCountdown === focusDuration * 60) {\n        new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n        setFocusSessionActive(!focusSessionActive);\n        return currentSessionCountdown = 0;\n      } else if (!focusSessionActive && currentSessionCountdown === breakDuration * 60) {\n        new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n        setFocusSessionActive(!focusSessionActive);\n        return currentSessionCountdown = 0;\n      } else {\n        return currentSessionCountdown += 1;\n      }\n    });\n  }, isTimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function handlePlayPauseClick() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            setDisableButton(false);\n            setSessionCountdown(sessionActive);\n            setSessionActive(true);\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Break, {\n    breakDuration: breakDuration,\n    handleIncrementClick: handleIncrementClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 8\n    }\n  }), /*#__PURE__*/React.createElement(Focus, {\n    focusDuration: focusDuration,\n    handleIncrementClick: handleIncrementClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PlayPause, {\n    isTimerRunning: isTimerRunning,\n    handleStop: handleStop,\n    disableButton: disableButton,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    focusSessionActive: focusSessionActive,\n    focusDuration: focusDuration,\n    sessionCountdown: sessionCountdown,\n    handlePlayPauseClick: handlePlayPauseClick,\n    ariaValue: ariaValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SubTitle, {\n    sessionActive: sessionActive,\n    ariaValue: ariaValue,\n    sessionCountdown: sessionCountdown,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    focusSessionActive: focusSessionActive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/sagewatterworth/Desktop/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","Focus","Break","PlayPause","SubTitle","initialStates","focusDuration","breakDuration","isTimerRunning","sessionCountdown","focusSessionActive","sessionActive","ariaValue","Pomodoro","setIsTimerRunning","session","setSession","setSessionCountdown","setSessionActive","setAriaValue","setFocusDuration","setBreakDuration","setFocusSessionActive","stopButton","setStopButton","disableButton","setDisableButton","nextTick","prevState","timeRemaining","Math","max","nextSession","currentSession","label","handleIncrementClick","target","currentFocusDuration","min","currentBreakDuration","handleStop","currentSessionCountdown","Audio","play","handlePlayPauseClick","nextState","prevStateSession"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Focus from \"./Focus\";\nimport Break from \"./Break\";\nimport PlayPause from \"./PlayPause\";\nimport SubTitle from \"./SubTitle\";\n\n\n  const initialStates = {\n    focusDuration: 25,\n    breakDuration: 5,\n    isTimerRunning: false,\n    sessionCountdown: 0,\n    focusSessionActive: false,\n    sessionActive: false,\n    ariaValue: 0,\n  };\n\n  function Pomodoro() {\n\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n  const [sessionCountdown, setSessionCountdown] = useState(0);\n  const [sessionActive, setSessionActive] = useState(false);\n  const [ariaValue, setAriaValue] = useState(0);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [focusSessionActive, setFocusSessionActive] = useState(false);\n\n  //disable and enable stop button\n  const [stopButton, setStopButton] = useState(true)\n  const [disableButton, setDisableButton] = useState(true)\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\n\nconst handleIncrementClick = ({ target }) => {\n  /*\n  ISSUE: The icons on the buttons and the buttons themselves return different values,\n  so I only place handle event on buttons themselves.\n  */\n\n  // Handling decrease and increase buttons for focus duration and break duration when not in session\n  if (!focusSessionActive && sessionCountdown === 0) {\n    switch (target[\"name\"]) {\n      case \"decrease-focus\":\n        setFocusDuration((currentFocusDuration) =>\n          Math.max(5, currentFocusDuration - 5)\n        );\n        break;\n      case \"increase-focus\":\n        setFocusDuration((currentFocusDuration) =>\n          Math.min(60, currentFocusDuration + 5)\n        );\n        break;\n      case \"decrease-break\":\n        setBreakDuration((currentBreakDuration) =>\n          Math.max(1, currentBreakDuration - 1)\n        );\n        break;\n      case \"increase-break\":\n        setBreakDuration((currentBreakDuration) =>\n          Math.min(15, currentBreakDuration + 1)\n        );\n        break;\n      default:\n        break;\n    }\n  }\n};\n\n\n\nfunction handleStop(){\n  setIsTimerRunning(false)\n  setStopButton(true)\n  setSession(null)\n  setDisableButton(false)\n  setFocusSessionActive(false)\n  setSessionActive(false)\n  setSessionCountdown(25*60)\n  setBreakDuration(5*60)\n  setFocusDuration(25*60)\n  setAriaValue(25)\n}\n\n  useInterval(\n    () => {\n\n      // Progress bar\n      if (focusSessionActive) {\n        setAriaValue((sessionCountdown / (focusDuration * 60)) * 100);\n      } else if (!focusSessionActive && (sessionCountdown !== 0)) {\n        setAriaValue((sessionCountdown / (breakDuration * 60)) * 100);\n      }\n\n\n      /*\n      Run increment countdown at turn of new session\n      */\n      setSessionCountdown((currentSessionCountdown) => {\n        if (\n          focusSessionActive &&\n          currentSessionCountdown === focusDuration * 60\n        ) {\n          new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n          setFocusSessionActive(!focusSessionActive);\n          return (currentSessionCountdown = 0);\n        } else if (\n          !focusSessionActive &&\n          currentSessionCountdown === breakDuration * 60\n        ) {\n          new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n          setFocusSessionActive(!focusSessionActive);\n          return (currentSessionCountdown = 0);\n        } else {\n          return (currentSessionCountdown += 1);\n        }\n      });\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\nfunction handlePlayPauseClick() {\n     setIsTimerRunning((prevState) => {\n       const nextState = !prevState;\n       if (nextState) {\n         setSession((prevStateSession) => {\n           // If the timer is starting and the previous session is null,\n           // start a focusing session.\n           if (prevStateSession === null) {\n            setDisableButton(false);\n            setSessionCountdown(sessionActive)\n            setSessionActive(true)\n             return {\n               label: \"Focusing\",\n               timeRemaining: focusDuration * 60,\n             };\n           }\n           return prevStateSession;\n         });\n      }\n    return nextState;\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n\n       <Break\n        breakDuration={breakDuration}\n        handleIncrementClick={handleIncrementClick}\n      />\n      <Focus\n      focusDuration={focusDuration}\n      handleIncrementClick={handleIncrementClick}\n      />\n      <PlayPause\n        isTimerRunning={isTimerRunning}\n        handleStop={handleStop}\n        disableButton={disableButton}\n        focusDuration={focusDuration}\n        breakDuration={breakDuration}\n        focusSessionActive={focusSessionActive}\n        focusDuration={focusDuration}\n        sessionCountdown={sessionCountdown}\n        handlePlayPauseClick={handlePlayPauseClick}\n        ariaValue={ariaValue}\n      />\n      <SubTitle\n      sessionActive={sessionActive}\n      ariaValue={ariaValue}\n      sessionCountdown={sessionCountdown}\n      focusDuration={focusDuration}\n      breakDuration={breakDuration}\n      focusSessionActive={focusSessionActive}\n      />\n    </div>\n  )\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}
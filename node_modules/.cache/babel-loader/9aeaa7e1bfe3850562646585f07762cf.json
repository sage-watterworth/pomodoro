{"ast":null,"code":"var _jsxFileName = \"/Users/sagewatterworth/Desktop/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Focus from \"./Focus\";\nimport Break from \"./Break\";\nimport PlayPause from \"./PlayPause\";\nconst initialStates = {\n  focusDuration: 25,\n  breakDuration: 5,\n  isTimerRunning: false,\n  sessionCountdown: 0,\n  focusSessionActive: false,\n  sessionActive: false,\n  ariaValue: 0\n};\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null);\n  const [sessionCountdown, setSessionCountdown] = useState(0);\n  const [sessionActive, setSessionActive] = useState(false);\n  const [ariaValue, setAriaValue] = useState(0); // ToDo: Allow the user to adjust the focus and break duration.\n\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [focusSessionActive, setFocusSessionActive] = useState(false); //disable and enable stop button\n\n  const [stopButton, setStopButton] = useState(true);\n  const [disableButton, setDisableButton] = useState(true);\n\n  const handleIncrementClick = ({\n    target\n  }) => {\n    if (target.name === \"increase-focus\" || target.parentNode.name === \"increase-focus\") {\n      setFocusDuration(currentFocusDuration => Math.min(currentFocusDuration + 5, 60));\n    } else if (target.name === \"decrease-focus\" || target.parentNode.name === \"decrease-focus\") {\n      setFocusDuration(currentFocusDuration => Math.max(currentFocusDuration - 5, 5));\n    } else if (target.name === \"increase-break\" || target.parentNode.name === \"increase-break\") {\n      setBreakDuration(currentFocusDuration => Math.min(currentFocusDuration + 1, 15));\n    } else if (target.name === \"decrease-break\" || target.parentNode.name === \"decrease-break\") {\n      setBreakDuration(currentFocusDuration => Math.max(currentFocusDuration - 1, 1));\n    }\n  };\n\n  function handleStop() {\n    setIsTimerRunning(false);\n    setStopButton(true);\n    setSession(null);\n    setDisableButton(false);\n  }\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n\n  useInterval(() => {\n    // Progress bar\n    if (focusSessionActive) {\n      setAriaValue(sessionCountdown / (focusDuration * 60) * 100);\n    } else if (!focusSessionActive & sessionCountdown !== 0) {\n      setAriaValue(sessionCountdown / (breakDuration * 60) * 100);\n    }\n    /*\n    Run increment countdown at turn of new session (countdown = 0 or )\n    */\n\n\n    setSessionCountdown(currentSessionCountdown => {\n      if (focusSessionActive && currentSessionCountdown === focusDuration * 60) {\n        new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n        setFocusSessionActive(!focusSessionActive);\n        return currentSessionCountdown = 0;\n      } else if (!focusSessionActive && currentSessionCountdown === breakDuration * 60) {\n        new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n        setFocusSessionActive(!focusSessionActive);\n        return currentSessionCountdown = 0;\n      } else {\n        return currentSessionCountdown += 1;\n      }\n    });\n  }, isTimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function handlePlayPauseClick() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            setDisableButton(false);\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Break, {\n    breakDuration: breakDuration,\n    handleIncrementClick: handleIncrementClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 8\n    }\n  }), /*#__PURE__*/React.createElement(Focus, {\n    focusDuration: focusDuration,\n    handleIncrementClick: handleIncrementClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PlayPause, {\n    isTimerRunning: isTimerRunning,\n    handleStop: handleStop,\n    disableButton: disableButton,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    focusSessionActive: focusSessionActive,\n    focusDuration: focusDuration,\n    sessionCountdown: sessionCountdown,\n    handlePlayPauseClick: handlePlayPauseClick,\n    ariaValue: ariaValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/sagewatterworth/Desktop/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","Focus","Break","PlayPause","initialStates","focusDuration","breakDuration","isTimerRunning","sessionCountdown","focusSessionActive","sessionActive","ariaValue","nextTick","prevState","timeRemaining","Math","max","nextSession","currentSession","label","Pomodoro","setIsTimerRunning","session","setSession","setSessionCountdown","setSessionActive","setAriaValue","setFocusDuration","setBreakDuration","setFocusSessionActive","stopButton","setStopButton","disableButton","setDisableButton","handleIncrementClick","target","name","parentNode","currentFocusDuration","min","handleStop","currentSessionCountdown","Audio","play","handlePlayPauseClick","nextState","prevStateSession"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAGE,MAAMC,aAAa,GAAG;AACpBC,EAAAA,aAAa,EAAE,EADK;AAEpBC,EAAAA,aAAa,EAAE,CAFK;AAGpBC,EAAAA,cAAc,EAAE,KAHI;AAIpBC,EAAAA,gBAAgB,EAAE,CAJE;AAKpBC,EAAAA,kBAAkB,EAAE,KALA;AAMpBC,EAAAA,aAAa,EAAE,KANK;AAOpBC,EAAAA,SAAS,EAAE;AAPS,CAAtB;AAUF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;AAC3B,QAAMC,aAAa,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYH,SAAS,CAACC,aAAV,GAA0B,CAAtC,CAAtB;AACA,SAAO,EACL,GAAGD,SADE;AAELC,IAAAA;AAFK,GAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,WAAT,CAAqBZ,aAArB,EAAoCC,aAApC,EAAmD;AACjD;AACF;AACA;AACE,SAAQY,cAAD,IAAoB;AACzB,QAAIA,cAAc,CAACC,KAAf,KAAyB,UAA7B,EAAyC;AACvC,aAAO;AACLA,QAAAA,KAAK,EAAE,UADF;AAELL,QAAAA,aAAa,EAAER,aAAa,GAAG;AAF1B,OAAP;AAID;;AACD,WAAO;AACLa,MAAAA,KAAK,EAAE,UADF;AAELL,MAAAA,aAAa,EAAET,aAAa,GAAG;AAF1B,KAAP;AAID,GAXD;AAYD;;AAED,SAASe,QAAT,GAAoB;AAClB;AACA,QAAM,CAACb,cAAD,EAAiBc,iBAAjB,IAAsCtB,QAAQ,CAAC,KAAD,CAApD,CAFkB,CAGlB;;AACA,QAAM,CAACuB,OAAD,EAAUC,UAAV,IAAwBxB,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACS,gBAAD,EAAmBgB,mBAAnB,IAA0CzB,QAAQ,CAAC,CAAD,CAAxD;AACA,QAAM,CAACW,aAAD,EAAgBe,gBAAhB,IAAoC1B,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACY,SAAD,EAAYe,YAAZ,IAA4B3B,QAAQ,CAAC,CAAD,CAA1C,CAPkB,CASlB;;AACA,QAAM,CAACM,aAAD,EAAgBsB,gBAAhB,IAAoC5B,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACO,aAAD,EAAgBsB,gBAAhB,IAAoC7B,QAAQ,CAAC,CAAD,CAAlD;AACA,QAAM,CAACU,kBAAD,EAAqBoB,qBAArB,IAA8C9B,QAAQ,CAAC,KAAD,CAA5D,CAZkB,CAclB;;AACA,QAAM,CAAC+B,UAAD,EAAaC,aAAb,IAA8BhC,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACiC,aAAD,EAAgBC,gBAAhB,IAAoClC,QAAQ,CAAC,IAAD,CAAlD;;AAIA,QAAMmC,oBAAoB,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAgB;AAC3C,QACEA,MAAM,CAACC,IAAP,KAAgB,gBAAhB,IACAD,MAAM,CAACE,UAAP,CAAkBD,IAAlB,KAA2B,gBAF7B,EAGE;AACAT,MAAAA,gBAAgB,CAAEW,oBAAD,IAA0BvB,IAAI,CAACwB,GAAL,CAASD,oBAAoB,GAAG,CAAhC,EAAmC,EAAnC,CAA3B,CAAhB;AACD,KALD,MAKO,IACLH,MAAM,CAACC,IAAP,KAAgB,gBAAhB,IACAD,MAAM,CAACE,UAAP,CAAkBD,IAAlB,KAA2B,gBAFtB,EAGL;AACAT,MAAAA,gBAAgB,CAAEW,oBAAD,IAA0BvB,IAAI,CAACC,GAAL,CAASsB,oBAAoB,GAAG,CAAhC,EAAmC,CAAnC,CAA3B,CAAhB;AACD,KALM,MAKA,IACLH,MAAM,CAACC,IAAP,KAAgB,gBAAhB,IACAD,MAAM,CAACE,UAAP,CAAkBD,IAAlB,KAA2B,gBAFtB,EAGL;AACAR,MAAAA,gBAAgB,CAAEU,oBAAD,IAA0BvB,IAAI,CAACwB,GAAL,CAASD,oBAAoB,GAAG,CAAhC,EAAmC,EAAnC,CAA3B,CAAhB;AACD,KALM,MAKA,IACLH,MAAM,CAACC,IAAP,KAAgB,gBAAhB,IACAD,MAAM,CAACE,UAAP,CAAkBD,IAAlB,KAA2B,gBAFtB,EAGL;AACAR,MAAAA,gBAAgB,CAAEU,oBAAD,IAA0BvB,IAAI,CAACC,GAAL,CAASsB,oBAAoB,GAAG,CAAhC,EAAmC,CAAnC,CAA3B,CAAhB;AACD;AACF,GAtBD;;AAyBF,WAASE,UAAT,GAAqB;AACnBnB,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAU,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAR,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAU,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD;AAEC;AACF;AACA;AACA;AACA;;;AAKEjC,EAAAA,WAAW,CACT,MAAM;AAEJ;AACA,QAAIS,kBAAJ,EAAwB;AACtBiB,MAAAA,YAAY,CAAElB,gBAAgB,IAAIH,aAAa,GAAG,EAApB,CAAjB,GAA4C,GAA7C,CAAZ;AACD,KAFD,MAEO,IAAI,CAACI,kBAAD,GAAuBD,gBAAgB,KAAK,CAAhD,EAAoD;AACzDkB,MAAAA,YAAY,CAAElB,gBAAgB,IAAIF,aAAa,GAAG,EAApB,CAAjB,GAA4C,GAA7C,CAAZ;AACD;AAED;AACN;AACA;;;AACMkB,IAAAA,mBAAmB,CAAEiB,uBAAD,IAA6B;AAC/C,UACEhC,kBAAkB,IAClBgC,uBAAuB,KAAKpC,aAAa,GAAG,EAF9C,EAGE;AACA,YAAIqC,KAAJ,CAAW,8CAAX,EAA0DC,IAA1D;AACAd,QAAAA,qBAAqB,CAAC,CAACpB,kBAAF,CAArB;AACA,eAAQgC,uBAAuB,GAAG,CAAlC;AACD,OAPD,MAOO,IACL,CAAChC,kBAAD,IACAgC,uBAAuB,KAAKnC,aAAa,GAAG,EAFvC,EAGL;AACA,YAAIoC,KAAJ,CAAW,8CAAX,EAA0DC,IAA1D;AACAd,QAAAA,qBAAqB,CAAC,CAACpB,kBAAF,CAArB;AACA,eAAQgC,uBAAuB,GAAG,CAAlC;AACD,OAPM,MAOA;AACL,eAAQA,uBAAuB,IAAI,CAAnC;AACD;AACF,KAlBkB,CAAnB;AAmBD,GAhCQ,EAiCTlC,cAAc,GAAG,IAAH,GAAU,IAjCf,CAAX;AAqCA;AACF;AACA;;AACA,WAASqC,oBAAT,GAAgC;AAC3BvB,IAAAA,iBAAiB,CAAER,SAAD,IAAe;AAC/B,YAAMgC,SAAS,GAAG,CAAChC,SAAnB;;AACA,UAAIgC,SAAJ,EAAe;AACbtB,QAAAA,UAAU,CAAEuB,gBAAD,IAAsB;AAC/B;AACA;AACA,cAAIA,gBAAgB,KAAK,IAAzB,EAA+B;AAC9Bb,YAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACC,mBAAO;AACLd,cAAAA,KAAK,EAAE,UADF;AAELL,cAAAA,aAAa,EAAET,aAAa,GAAG;AAF1B,aAAP;AAID;;AACD,iBAAOyC,gBAAP;AACD,SAXS,CAAV;AAYF;;AACH,aAAOD,SAAP;AACC,KAjBiB,CAAjB;AAkBF;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEG,oBAAC,KAAD;AACC,IAAA,aAAa,EAAEvC,aADhB;AAEC,IAAA,oBAAoB,EAAE4B,oBAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFH,eAME,oBAAC,KAAD;AACA,IAAA,aAAa,EAAE7B,aADf;AAEA,IAAA,oBAAoB,EAAE6B,oBAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,eAUE,oBAAC,SAAD;AACE,IAAA,cAAc,EAAE3B,cADlB;AAEE,IAAA,UAAU,EAAEiC,UAFd;AAGE,IAAA,aAAa,EAAER,aAHjB;AAIE,IAAA,aAAa,EAAE3B,aAJjB;AAKE,IAAA,aAAa,EAAEC,aALjB;AAME,IAAA,kBAAkB,EAAEG,kBANtB;AAOE,IAAA,aAAa,EAAEJ,aAPjB;AAQE,IAAA,gBAAgB,EAAEG,gBARpB;AASE,IAAA,oBAAoB,EAAEoC,oBATxB;AAUE,IAAA,SAAS,EAAEjC,SAVb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CADF;AAyBD;;AAED,eAAeS,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Focus from \"./Focus\";\nimport Break from \"./Break\";\nimport PlayPause from \"./PlayPause\";\n\n\n  const initialStates = {\n    focusDuration: 25,\n    breakDuration: 5,\n    isTimerRunning: false,\n    sessionCountdown: 0,\n    focusSessionActive: false,\n    sessionActive: false,\n    ariaValue: 0,\n  };\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n  const [sessionCountdown, setSessionCountdown] = useState(0);\n  const [sessionActive, setSessionActive] = useState(false);\n  const [ariaValue, setAriaValue] = useState(0);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [focusSessionActive, setFocusSessionActive] = useState(false);\n\n  //disable and enable stop button\n  const [stopButton, setStopButton] = useState(true)\n  const [disableButton, setDisableButton] = useState(true)\n\n\n\n  const handleIncrementClick = ({ target }) => {\n    if (\n      target.name === \"increase-focus\" ||\n      target.parentNode.name === \"increase-focus\"\n    ) {\n      setFocusDuration((currentFocusDuration) => Math.min(currentFocusDuration + 5, 60));\n    } else if (\n      target.name === \"decrease-focus\" ||\n      target.parentNode.name === \"decrease-focus\"\n    ) {\n      setFocusDuration((currentFocusDuration) => Math.max(currentFocusDuration - 5, 5));\n    } else if (\n      target.name === \"increase-break\" ||\n      target.parentNode.name === \"increase-break\"\n    ) {\n      setBreakDuration((currentFocusDuration) => Math.min(currentFocusDuration + 1, 15));\n    } else if (\n      target.name === \"decrease-break\" ||\n      target.parentNode.name === \"decrease-break\"\n    ) {\n      setBreakDuration((currentFocusDuration) => Math.max(currentFocusDuration - 1, 1));\n    }\n  };\n\n\nfunction handleStop(){\n  setIsTimerRunning(false)\n  setStopButton(true)\n  setSession(null)\n  setDisableButton(false)\n}\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n\n\n\n  useInterval(\n    () => {\n\n      // Progress bar\n      if (focusSessionActive) {\n        setAriaValue((sessionCountdown / (focusDuration * 60)) * 100);\n      } else if (!focusSessionActive & (sessionCountdown !== 0)) {\n        setAriaValue((sessionCountdown / (breakDuration * 60)) * 100);\n      }\n\n      /*\n      Run increment countdown at turn of new session (countdown = 0 or )\n      */\n      setSessionCountdown((currentSessionCountdown) => {\n        if (\n          focusSessionActive &&\n          currentSessionCountdown === focusDuration * 60\n        ) {\n          new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n          setFocusSessionActive(!focusSessionActive);\n          return (currentSessionCountdown = 0);\n        } else if (\n          !focusSessionActive &&\n          currentSessionCountdown === breakDuration * 60\n        ) {\n          new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n          setFocusSessionActive(!focusSessionActive);\n          return (currentSessionCountdown = 0);\n        } else {\n          return (currentSessionCountdown += 1);\n        }\n      });\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\nfunction handlePlayPauseClick() {\n     setIsTimerRunning((prevState) => {\n       const nextState = !prevState;\n       if (nextState) {\n         setSession((prevStateSession) => {\n           // If the timer is starting and the previous session is null,\n           // start a focusing session.\n           if (prevStateSession === null) {\n            setDisableButton(false);\n             return {\n               label: \"Focusing\",\n               timeRemaining: focusDuration * 60,\n             };\n           }\n           return prevStateSession;\n         });\n      }\n    return nextState;\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n\n       <Break\n        breakDuration={breakDuration}\n        handleIncrementClick={handleIncrementClick}\n      />\n      <Focus\n      focusDuration={focusDuration}\n      handleIncrementClick={handleIncrementClick}\n      />\n      <PlayPause\n        isTimerRunning={isTimerRunning}\n        handleStop={handleStop}\n        disableButton={disableButton}\n        focusDuration={focusDuration}\n        breakDuration={breakDuration}\n        focusSessionActive={focusSessionActive}\n        focusDuration={focusDuration}\n        sessionCountdown={sessionCountdown}\n        handlePlayPauseClick={handlePlayPauseClick}\n        ariaValue={ariaValue}\n      />\n    </div>\n  )\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}